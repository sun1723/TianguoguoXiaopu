{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (_ref) {\n    var t = _ref.types;\n\n    /**\n     * Add a helper to take an initial descriptor, apply some decorators to it, and optionally\n     * define the property.\n     */\n    function ensureApplyDecoratedDescriptorHelper(path, state) {\n        if (!state.applyDecoratedDescriptor) {\n            state.applyDecoratedDescriptor = path.scope.generateUidIdentifier('applyDecoratedDescriptor');\n            var helper = buildApplyDecoratedDescriptor({\n                NAME: state.applyDecoratedDescriptor\n            });\n            path.scope.getProgramParent().path.unshiftContainer('body', helper);\n        }\n\n        return state.applyDecoratedDescriptor;\n    }\n\n    /**\n     * Add a helper to call as a replacement for class property definition.\n     */\n    function ensureInitializerDefineProp(path, state) {\n        if (!state.initializerDefineProp) {\n            state.initializerDefineProp = path.scope.generateUidIdentifier('initDefineProp');\n            var helper = buildInitializerDefineProperty({\n                NAME: state.initializerDefineProp\n            });\n            path.scope.getProgramParent().path.unshiftContainer('body', helper);\n        }\n\n        return state.initializerDefineProp;\n    }\n\n    /**\n     * Add a helper that will throw a useful error if the transform fails to detect the class\n     * property assignment, so users know something failed.\n     */\n    function ensureInitializerWarning(path, state) {\n        if (!state.initializerWarningHelper) {\n            state.initializerWarningHelper = path.scope.generateUidIdentifier('initializerWarningHelper');\n            var helper = buildInitializerWarningHelper({\n                NAME: state.initializerWarningHelper\n            });\n            path.scope.getProgramParent().path.unshiftContainer('body', helper);\n        }\n\n        return state.initializerWarningHelper;\n    }\n\n    /**\n     * If the decorator expressions are non-identifiers, hoist them to before the class so we can be sure\n     * that they are evaluated in order.\n     */\n    function applyEnsureOrdering(path) {\n        // TODO: This should probably also hoist computed properties.\n        var decorators = (path.isClass() ? [path].concat(path.get('body.body')) : path.get('properties')).reduce(function (acc, prop) {\n            return acc.concat(prop.node.decorators || []);\n        }, []);\n\n        var identDecorators = decorators.filter(function (decorator) {\n            return !t.isIdentifier(decorator.expression);\n        });\n        if (identDecorators.length === 0) return;\n\n        return t.sequenceExpression(identDecorators.map(function (decorator) {\n            var expression = decorator.expression;\n            var id = decorator.expression = path.scope.generateDeclaredUidIdentifier('dec');\n            return t.assignmentExpression('=', id, expression);\n        }).concat([path.node]));\n    }\n\n    /**\n     * Given a class expression with class-level decorators, create a new expression\n     * with the proper decorated behavior.\n     */\n    function applyClassDecorators(classPath, state) {\n        var decorators = classPath.node.decorators || [];\n        classPath.node.decorators = null;\n\n        if (decorators.length === 0) return;\n\n        var name = classPath.scope.generateDeclaredUidIdentifier('class');\n\n        return decorators.map(function (dec) {\n            return dec.expression;\n        }).reverse().reduce(function (acc, decorator) {\n            return buildClassDecorator({\n                CLASS_REF: name,\n                DECORATOR: decorator,\n                INNER: acc\n            }).expression;\n        }, classPath.node);\n    }\n\n    /**\n     * Given a class expression with method-level decorators, create a new expression\n     * with the proper decorated behavior.\n     */\n    function applyMethodDecorators(path, state) {\n        var hasMethodDecorators = path.node.body.body.some(function (node) {\n            return (node.decorators || []).length > 0;\n        });\n\n        if (!hasMethodDecorators) return;\n\n        return applyTargetDecorators(path, state, path.node.body.body);\n    }\n\n    /**\n     * Given an object expression with property decorators, create a new expression\n     * with the proper decorated behavior.\n     */\n    function applyObjectDecorators(path, state) {\n        var hasMethodDecorators = path.node.properties.some(function (node) {\n            return (node.decorators || []).length > 0;\n        });\n\n        if (!hasMethodDecorators) return;\n\n        return applyTargetDecorators(path, state, path.node.properties);\n    }\n\n    /**\n     * A helper to pull out property decorators into a sequence expression.\n     */\n    function applyTargetDecorators(path, state, decoratedProps) {\n        var descName = path.scope.generateDeclaredUidIdentifier('desc');\n        var valueTemp = path.scope.generateDeclaredUidIdentifier('value');\n\n        var name = path.scope.generateDeclaredUidIdentifier(path.isClass() ? 'class' : 'obj');\n\n        var exprs = decoratedProps.reduce(function (acc, node) {\n            var decorators = node.decorators || [];\n            node.decorators = null;\n\n            if (decorators.length === 0) return acc;\n\n            if (node.computed) {\n                throw path.buildCodeFrameError('Computed method/property decorators are not yet supported.');\n            }\n\n            var property = t.isLiteral(node.key) ? node.key : t.stringLiteral(node.key.name);\n\n            var target = path.isClass() && !node.static ? buildClassPrototype({\n                CLASS_REF: name\n            }).expression : name;\n\n            if (t.isClassProperty(node, { static: false })) {\n                var descriptor = path.scope.generateDeclaredUidIdentifier('descriptor');\n\n                var initializer = node.value ? t.functionExpression(null, [], t.blockStatement([t.returnStatement(node.value)])) : t.nullLiteral();\n                node.value = t.callExpression(ensureInitializerWarning(path, state), [descriptor, t.thisExpression()]);\n\n                acc = acc.concat([t.assignmentExpression('=', descriptor, t.callExpression(ensureApplyDecoratedDescriptorHelper(path, state), [target, property, t.arrayExpression(decorators.map(function (dec) {\n                    return dec.expression;\n                })), t.objectExpression([t.objectProperty(t.identifier('enumerable'), t.booleanLiteral(true)), t.objectProperty(t.identifier('initializer'), initializer)])]))]);\n            } else {\n                acc = acc.concat(t.callExpression(ensureApplyDecoratedDescriptorHelper(path, state), [target, property, t.arrayExpression(decorators.map(function (dec) {\n                    return dec.expression;\n                })), t.isObjectProperty(node) || t.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({\n                    TEMP: path.scope.generateDeclaredUidIdentifier('init'),\n                    TARGET: target,\n                    PROPERTY: property\n                }).expression : buildGetDescriptor({\n                    TARGET: target,\n                    PROPERTY: property\n                }).expression, target]));\n            }\n\n            return acc;\n        }, []);\n\n        return t.sequenceExpression([t.assignmentExpression('=', name, path.node), t.sequenceExpression(exprs), name]);\n    }\n\n    return {\n        inherits: require(\"babel-plugin-syntax-decorators\"),\n\n        visitor: {\n            ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {\n                if (!path.get(\"declaration\").isClassDeclaration()) return;\n\n                var node = path.node;\n\n                var ref = node.declaration.id || path.scope.generateUidIdentifier(\"default\");\n                node.declaration.id = ref;\n\n                // Split the class declaration and the export into two separate statements.\n                path.replaceWith(node.declaration);\n                path.insertAfter(t.exportNamedDeclaration(null, [t.exportSpecifier(ref, t.identifier('default'))]));\n            },\n            ClassDeclaration: function ClassDeclaration(path) {\n                var node = path.node;\n\n\n                var ref = node.id || path.scope.generateUidIdentifier(\"class\");\n\n                path.replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(ref, t.toExpression(node))]));\n            },\n            ClassExpression: function ClassExpression(path, state) {\n                // Create a replacement for the class node if there is one. We do one pass to replace classes with\n                // class decorators, and a second pass to process method decorators.\n                var decoratedClass = applyEnsureOrdering(path) || applyClassDecorators(path, state) || applyMethodDecorators(path, state);\n\n                if (decoratedClass) path.replaceWith(decoratedClass);\n            },\n            ObjectExpression: function ObjectExpression(path, state) {\n                var decoratedObject = applyEnsureOrdering(path) || applyObjectDecorators(path, state);\n\n                if (decoratedObject) path.replaceWith(decoratedObject);\n            },\n            AssignmentExpression: function AssignmentExpression(path, state) {\n                if (!state.initializerWarningHelper) return;\n\n                if (!path.get('left').isMemberExpression()) return;\n                if (!path.get('left.property').isIdentifier()) return;\n                if (!path.get('right').isCallExpression()) return;\n                if (!path.get('right.callee').isIdentifier({ name: state.initializerWarningHelper.name })) return;\n\n                path.replaceWith(t.callExpression(ensureInitializerDefineProp(path, state), [path.get('left.object').node, t.stringLiteral(path.get('left.property').node.name), path.get('right.arguments')[0].node, path.get('right.arguments')[1].node]));\n            }\n        }\n    };\n};\n\nvar _babelTemplate = require('babel-template');\n\nvar _babelTemplate2 = _interopRequireDefault(_babelTemplate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar buildClassDecorator = (0, _babelTemplate2.default)('\\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\\n');\n\nvar buildClassPrototype = (0, _babelTemplate2.default)('\\n  CLASS_REF.prototype;\\n');\n\nvar buildGetDescriptor = (0, _babelTemplate2.default)('\\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\\n');\n\nvar buildGetObjectInitializer = (0, _babelTemplate2.default)('\\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\\n        enumerable: true,\\n        configurable: true,\\n        writable: true,\\n        initializer: function(){\\n            return TEMP;\\n        }\\n    })\\n');\n\nvar buildInitializerWarningHelper = (0, _babelTemplate2.default)('\\n    function NAME(descriptor, context){\\n        throw new Error(\\'Decorating class property failed. Please ensure that transform-class-properties is enabled.\\');\\n    }\\n');\n\nvar buildInitializerDefineProperty = (0, _babelTemplate2.default)('\\n    function NAME(target, property, descriptor, context){\\n        if (!descriptor) return;\\n\\n        Object.defineProperty(target, property, {\\n            enumerable: descriptor.enumerable,\\n            configurable: descriptor.configurable,\\n            writable: descriptor.writable,\\n            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,\\n        });\\n    }\\n');\n\nvar buildApplyDecoratedDescriptor = (0, _babelTemplate2.default)('\\n    function NAME(target, property, decorators, descriptor, context){\\n        var desc = {};\\n        Object[\\'ke\\' + \\'ys\\'](descriptor).forEach(function(key){\\n            desc[key] = descriptor[key];\\n        });\\n        desc.enumerable = !!desc.enumerable;\\n        desc.configurable = !!desc.configurable;\\n        if (\\'value\\' in desc || desc.initializer){\\n            desc.writable = true;\\n        }\\n\\n        desc = decorators.slice().reverse().reduce(function(desc, decorator){\\n            return decorator(target, property, desc) || desc;\\n        }, desc);\\n\\n        if (context && desc.initializer !== void 0){\\n            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\\n            desc.initializer = undefined;\\n        }\\n\\n        if (desc.initializer === void 0){\\n            // This is a hack to avoid this being processed by \\'transform-runtime\\'.\\n            // See issue #9.\\n            Object[\\'define\\' + \\'Property\\'](target, property, desc);\\n            desc = null;\\n        }\\n\\n        return desc;\\n    }\\n');\n\n;"]}